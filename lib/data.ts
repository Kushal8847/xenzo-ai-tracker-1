import type { Transaction, Category, TransactionWithCategory, Account, Budget, Goal } from "./types"

export type { Transaction, TransactionWithCategory, Category, Account, Budget, Goal } from "./types"

// Mock categories data
export const mockCategories: Category[] = [
  {
    id: "cat-1",
    user_id: "demo-user-123",
    name: "Groceries",
    type: "expense",
    color: "#ef4444",
    icon: "shopping-cart",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-2",
    user_id: "demo-user-123",
    name: "Transportation",
    type: "expense",
    color: "#f97316",
    icon: "car",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-3",
    user_id: "demo-user-123",
    name: "Entertainment",
    type: "expense",
    color: "#8b5cf6",
    icon: "film",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-4",
    user_id: "demo-user-123",
    name: "Utilities",
    type: "expense",
    color: "#06b6d4",
    icon: "zap",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-5",
    user_id: "demo-user-123",
    name: "Dining Out",
    type: "expense",
    color: "#f59e0b",
    icon: "utensils",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-6",
    user_id: "demo-user-123",
    name: "Salary",
    type: "income",
    color: "#10b981",
    icon: "dollar-sign",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-7",
    user_id: "demo-user-123",
    name: "Freelance",
    type: "income",
    color: "#06b6d4",
    icon: "briefcase",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "cat-8",
    user_id: "demo-user-123",
    name: "Shopping",
    type: "expense",
    color: "#ec4899",
    icon: "shopping-bag",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
]

// Mock transactions data
export const mockTransactions: Transaction[] = [
  // Recent transactions (last 30 days) - Monthly Income: $5,350, Monthly Expenses: $2,847
  {
    id: "1",
    user_id: "demo-user-123",
    amount: -125.5,
    description: "Woolworths Grocery Shopping",
    transaction_date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-1",
    account_id: "acc-1",
  },
  {
    id: "2",
    user_id: "demo-user-123",
    amount: -45.0,
    description: "Uber Ride to Airport",
    transaction_date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-2",
    account_id: "acc-1",
  },
  {
    id: "3",
    user_id: "demo-user-123",
    amount: 4500.0,
    description: "Monthly Salary",
    transaction_date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    type: "income",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-6",
    account_id: "acc-1",
  },
  {
    id: "4",
    user_id: "demo-user-123",
    amount: -180.0,
    description: "Electricity Bill",
    transaction_date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-4",
    account_id: "acc-1",
  },
  {
    id: "5",
    user_id: "demo-user-123",
    amount: -85.0,
    description: "Dinner at Italian Restaurant",
    transaction_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-5",
    account_id: "acc-1",
  },
  {
    id: "6",
    user_id: "demo-user-123",
    amount: 850.0,
    description: "Freelance Design Work",
    transaction_date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(),
    type: "income",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-7",
    account_id: "acc-1",
  },
  {
    id: "7",
    user_id: "demo-user-123",
    amount: -320.0,
    description: "JB Hi-Fi Electronics",
    transaction_date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-8",
    account_id: "acc-1",
  },
  {
    id: "8",
    user_id: "demo-user-123",
    amount: -75.0,
    description: "Opal Card Top-up",
    transaction_date: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-2",
    account_id: "acc-1",
  },
  {
    id: "9",
    user_id: "demo-user-123",
    amount: -95.0,
    description: "Coles Grocery Shopping",
    transaction_date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-1",
    account_id: "acc-1",
  },
  {
    id: "10",
    user_id: "demo-user-123",
    amount: -120.0,
    description: "Netflix & Spotify Subscriptions",
    transaction_date: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-3",
    account_id: "acc-1",
  },
  {
    id: "11",
    user_id: "demo-user-123",
    amount: -65.0,
    description: "Coffee & Lunch",
    transaction_date: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-5",
    account_id: "acc-1",
  },
  {
    id: "12",
    user_id: "demo-user-123",
    amount: -140.0,
    description: "Gas Bill",
    transaction_date: new Date(Date.now() - 16 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-4",
    account_id: "acc-1",
  },
  {
    id: "13",
    user_id: "demo-user-123",
    amount: -110.0,
    description: "Aldi Grocery Shopping",
    transaction_date: new Date(Date.now() - 18 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-1",
    account_id: "acc-1",
  },
  {
    id: "14",
    user_id: "demo-user-123",
    amount: -55.0,
    description: "Train & Bus Fares",
    transaction_date: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-2",
    account_id: "acc-1",
  },
  {
    id: "15",
    user_id: "demo-user-123",
    amount: -180.0,
    description: "Clothing Shopping",
    transaction_date: new Date(Date.now() - 22 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-8",
    account_id: "acc-1",
  },
  {
    id: "16",
    user_id: "demo-user-123",
    amount: -90.0,
    description: "Weekend Brunch",
    transaction_date: new Date(Date.now() - 24 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-5",
    account_id: "acc-1",
  },
  {
    id: "17",
    user_id: "demo-user-123",
    amount: -85.0,
    description: "Movie Tickets & Popcorn",
    transaction_date: new Date(Date.now() - 26 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-3",
    account_id: "acc-1",
  },
  {
    id: "18",
    user_id: "demo-user-123",
    amount: -130.0,
    description: "IGA Grocery Shopping",
    transaction_date: new Date(Date.now() - 28 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-1",
    account_id: "acc-1",
  },
  {
    id: "19",
    user_id: "demo-user-123",
    amount: -45.0,
    description: "Taxi Ride",
    transaction_date: new Date(Date.now() - 29 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-2",
    account_id: "acc-1",
  },
  {
    id: "20",
    user_id: "demo-user-123",
    amount: -75.0,
    description: "Takeaway Dinner",
    transaction_date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    type: "expense",
    status: "completed",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    category_id: "cat-5",
    account_id: "acc-1",
  },
]

// Mock accounts data
export const mockAccounts: Account[] = [
  {
    id: "acc-1",
    user_id: "demo-user-123",
    name: "Checking Account",
    type: "checking",
    balance: 12540.0, // Updated to realistic balance
    currency: "AUD",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "acc-2",
    user_id: "demo-user-123",
    name: "Savings Account",
    type: "savings",
    balance: 8960.0, // Updated to realistic balance
    currency: "AUD",
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
]

// Mock budgets data
export const mockBudgets: Budget[] = [
  {
    id: "bud-1",
    user_id: "demo-user-123",
    category_id: "cat-1",
    name: "Groceries Budget",
    amount: 500.0,
    spent: 460.5, // Matches actual grocery spending
    period: "monthly",
    start_date: new Date().toISOString(),
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "bud-2",
    user_id: "demo-user-123",
    category_id: "cat-2",
    name: "Transportation Budget",
    amount: 200.0,
    spent: 165.0, // Matches actual transportation spending
    period: "monthly",
    start_date: new Date().toISOString(),
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "bud-3",
    user_id: "demo-user-123",
    category_id: "cat-3",
    name: "Entertainment Budget",
    amount: 250.0,
    spent: 205.0, // Matches actual entertainment spending
    period: "monthly",
    start_date: new Date().toISOString(),
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "bud-4",
    user_id: "demo-user-123",
    category_id: "cat-4",
    name: "Utilities Budget",
    amount: 400.0,
    spent: 320.0, // Matches actual utilities spending
    period: "monthly",
    start_date: new Date().toISOString(),
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "bud-5",
    user_id: "demo-user-123",
    category_id: "cat-5",
    name: "Dining Out Budget",
    amount: 300.0,
    spent: 215.0, // Matches actual dining spending
    period: "monthly",
    start_date: new Date().toISOString(),
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
]

// Mock goals data
export const mockGoals: Goal[] = [
  {
    id: "goal-1",
    user_id: "demo-user-123",
    name: "Emergency Fund",
    description: "Build an emergency fund for unexpected expenses",
    target_amount: 15000.0,
    current_amount: 4200.0, // Realistic progress
    target_date: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString(),
    category: "savings",
    is_completed: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "goal-2",
    user_id: "demo-user-123",
    name: "New Car Down Payment",
    description: "Save for a down payment on a new car",
    target_amount: 8000.0,
    current_amount: 1800.0, // Realistic progress
    target_date: new Date(new Date().setFullYear(new Date().getFullYear() + 2)).toISOString(),
    category: "transportation",
    is_completed: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: "goal-3",
    user_id: "demo-user-123",
    name: "Vacation Fund",
    description: "Save for a European vacation",
    target_amount: 5000.0,
    current_amount: 1200.0, // Realistic progress
    target_date: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString(),
    category: "travel",
    is_completed: false,
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
]

// Helper function to get transactions with category information
export const mockTransactionsWithCategory: TransactionWithCategory[] = mockTransactions.map((transaction) => {
  const category = mockCategories.find((cat) => cat.id === transaction.category_id)
  const account = mockAccounts.find((acc) => acc.id === transaction.account_id)
  return {
    ...transaction,
    category_name: category?.name,
    category_color: category?.color,
    category_icon: category?.icon,
    account_name: account?.name,
  }
})

// Sample data for charts and analytics
export const sampleSpendingData = [
  { name: "Groceries", value: 460.5, color: "#ef4444" },
  { name: "Transportation", value: 165.0, color: "#f97316" },
  { name: "Entertainment", value: 205.0, color: "#8b5cf6" },
  { name: "Utilities", value: 320.0, color: "#06b6d4" },
  { name: "Dining Out", value: 215.0, color: "#f59e0b" },
  { name: "Shopping", value: 500.0, color: "#ec4899" },
]

export const sampleMonthlyData = [
  { month: "Jan", income: 5350, expenses: 2847 },
  { month: "Feb", income: 5350, expenses: 2950 },
  { month: "Mar", income: 5350, expenses: 2750 },
  { month: "Apr", income: 5350, expenses: 3100 },
  { month: "May", income: 5350, expenses: 2900 },
  { month: "Jun", income: 5350, expenses: 2847 }, // Current month matches actual data
]

export const sampleBudgetData = [
  { category: "Groceries", budgeted: 500, spent: 460.5, color: "#ef4444" },
  { category: "Transportation", budgeted: 200, spent: 165.0, color: "#f97316" },
  { category: "Entertainment", budgeted: 250, spent: 205.0, color: "#8b5cf6" },
  { category: "Utilities", budgeted: 400, spent: 320.0, color: "#06b6d4" },
  { category: "Dining Out", budgeted: 300, spent: 215.0, color: "#f59e0b" },
]

// This ensures all components get consistent data from LocalStorageService
